source("R/helpers.R")
source("R/ParallelForensicLR_function.R")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats", "writexl")
load_packages(packages)
install.packages("rlang")
source("R/helpers.R")
source("R/ParallelForensicLR_function.R")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats", "writexl")
load_packages(packages)
install.packages(c("cubature", "curl", "data.table", "diffobj", "DirichletReg", "evaluate", "Familias", "flextable", "future", "future.apply", "generics", "ggplot2", "gt", "gWidgets2tcltk", "haven", "KLINK", "lubridate", "magick", "officer", "openssl", "parallelly", "pillar", "promises", "renv", "tibble", "tkrplot", "utf8", "V8", "zip", "zoo"))
source("R/helpers.R")
source("R/ParallelForensicLR_function.R")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats", "writexl")
load_packages(packages)
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats", "writexl")
load_packages(packages)
source("R/helpers.R")
source("R/ParallelForensicLR_function.R")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats")
load_packages(packages)
install.packages("ggplot2")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats")
load_packages(packages)
install.packages("ggplot2")
install.packages("ggplot2", dependencies = TRUE)
source("R/helpers.R")
source("R/ParallelForensicLR_function.R")
#Load packages.
packages <- c("pedtools", "forrel", "pedmut", "tidyverse", "doParallel", "svDialogs", "matrixStats")
load_packages(packages)
#Load .fam file with AM and PM.
data_dir <- "data"
fam_file <- list.files(path = data_dir, pattern = "\\.fam$", full.names  = TRUE)
mpi <- read_famfile(fam_file)
#Cheking connected pedigree.
connectedPed(mpi)
#Data structure.
mpi = pedFormat(mpi)
mpi = pedNames(mpi)
#Checking for intrafamilial Mendelian inheritance and removing discrepant markers.
mpi = mendelian(mpi)
#Selecting pedigrees to compare.
fam_id <- names(mpi[2:length(mpi)])
poi_id <- names(mpi[1]$`Unidentified persons`)
pm_selected <- select.list(choices = poi_id, multiple = T, graphics = T, title = "Select POIs:")
am_selected <- select.list(choices = fam_id, multiple = T, graphics = T, title = "Select Family pedigrees:")
if (is.null(pm) || is.null(am)) {
stop("Error: you must select at least one POI (pm) and one pedigree (am)")
}
print(paste("POIs selected:", paste(pm_selected, collapse = ", ")))
print(paste("Family pedigrees selected:", paste(am_selected, collapse = ", ")))
pm <- mpi$'Unidentified persons'[pm_selected]
am <- mpi[am_selected]
rm(mpi)
#Calculate the number of exclusions of each pm and am
exclusions_list <- computeExclusions(pm, am, maxIncomp = 70, ncores = 31)
file_name = paste0(fam_file[1], "-exclusions_list.RData")
save(exclusions_list, file = file_name)
